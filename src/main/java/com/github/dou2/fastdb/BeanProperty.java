package com.github.dou2.fastdb;

import java.lang.reflect.Field;
import java.lang.reflect.Method;

import com.github.dou2.fastdb.bean.BeanDescriptor;

/**
 * Description of a property of a bean. Includes its deployment information such
 * as database column mapping information.
 * 
 * @author guor
 *
 */
public interface BeanProperty {
	/**
	 * The BeanDescriptor.
	 * 
	 * @return
	 */
	BeanDescriptor<?> getBeanDescriptor();

	/**
	 * The property name.
	 * 
	 * @return
	 */
	String getName();

	/**
	 * The field associated with the property.
	 * 
	 * @return
	 */
	Field getField();

	/**
	 * The read method for the property.
	 * 
	 * @return
	 */
	Method getReadMethod();

	/**
	 * The write method for the property.
	 * 
	 * @return
	 */
	Method getWriteMethod();

	/**
	 * Get the value of the property through BeanProperty.
	 * 
	 * @param bean
	 *            target object
	 * @return
	 */
	Object getValue(Object bean);

	/**
	 * The property type.
	 * 
	 * @return
	 */
	Class<?> getPropertyType();

	/**
	 * Whether the database column is nullable.
	 * 
	 * @return
	 */
	boolean isNullable();

	/**
	 * Whether the property is a unique key.
	 * 
	 * @return
	 */
	boolean isUnique();

	/**
	 * The column length.
	 * 
	 * @return
	 */
	int getDbLength();

	/**
	 * The scale for a decimal (exact numeric) column.
	 * 
	 * @return
	 */
	int getDbScale();

	/**
	 * The name of the column.
	 * 
	 * @return
	 */
	String getDbColumn();

	/**
	 * The SQL fragment that is used when generating the DDL for the column.
	 * 
	 * @return
	 */
	String getDbColumnDefn();

	/**
	 * Whether the column is included in SQL INSERT statements generated by the
	 * persistence provider.
	 * 
	 * @return
	 */
	boolean isDbInsertable();

	/**
	 * Whether the column is included in SQL UPDATE statements generated by the
	 * persistence provider.
	 * 
	 * @return
	 */
	boolean isDbUpdatable();

	/**
	 * Whether the property is not persistent.
	 * 
	 * @return
	 */
	boolean isTransient();
}
